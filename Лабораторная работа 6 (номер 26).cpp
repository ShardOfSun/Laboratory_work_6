/* 26.Дана целочисленная матрица "зубчатого" вида
(каждая следующая строка короче предыдущей на 1 элемент)
из n строк и m столбцов (фактически, m = n, так что в программе только n).
Требуется переставить строки матрицы по возрастанию первых элементов строк. */

#include<iostream>
#include<fstream>
#include<string>

using std::cout;
using std::cin;
using std::endl;
using std::string;
using std::fstream;

bool contin(); // Интерфейс
void sort(int**, int, int); // Сортировка массива первых эл-в каждой строки и их индексов
void solution(int, int**, int**, int**); // Заполнение искомого массива 
void del(int**, int**, int**, int); // Удаление массивов

int main()
{	setlocale(0, "");

	// Основной цикл программы
	while (true)
	{	// Чтение файла
		fstream fin = fstream("TextFile.txt");
		if (!fin)	{	cout << "Ошибка в чтении файла.";	break;	}

		// Первая строка файла содержит размеры массива
		int n = 0;
		fin >> n; // Кол-во строк

		int** arr = new int* [n]; // Исходный массив

		// Создание и вывод исходного массива
		cout << "Исходный массив:" << endl;
		for (int i = 0; i < n; ++i)
		{	arr[i] = new int[n - i]; // Каждая строка исходного массива
			for (int j = 0; j < n - i; ++j)
			{	fin >> arr[i][j]; // Заполнение исходного массива из файла
				// Вывод исходного массива
				cout << arr[i][j] << " ";	}	cout << endl;	}

		int** arrfirst = new int* [n]; // Массив первых эл-ов строки и их индексов

		// Создание массива первых эл-ов строк и их индексов
		for (int i = 0; i < n; ++i)
		{	arrfirst[i] = new int[2]; // Каждая строка arrf
			arrfirst[i][0] = arr[i][0]; // Каждый перв-й эл-т строк arr
			arrfirst[i][1] = i;	} // Индекс этих эл-в

		// Сортировка массива перв-х эл-в каждой стр-ки и их индексов
		sort(arrfirst, 0, (n - 1));

		int** arrres = new int* [n]; // Искомый массив

		// Создание искомого массива
		for (int i = 0; i < n; ++i)
		{	int len = n - arrfirst[i][1]; /* Длина каждой строки
						      (находится с помощью индексов, внесенных в arrfirst) */
			arrres[i] = new int[len];	} // Создание каждой строки искомого массива


		// Заполнение искомого массива
		solution(n, arrfirst, arr, arrres);

		// Вывод искомого массива
		cout << endl << "Результат сортировки:" << endl;
		for (int i = 0; i < n; ++i)
		{	int len = n - arrfirst[i][1];
			for (int j = 0; j < len; ++j)
			{	cout << arrres[i][j] << " ";	}	cout << endl;	}

		// Удаление всех массивов
		del(arr, arrfirst, arrres, n);

		if (contin()) // Интерфейс
			continue;

		fin.close();
		break;	}
	return 0;
}

/* Сортировка массива перв-х эл-в каждой стр-ки и их индексов
(методом Быстрой сортировки) */
void sort(int** arr, int l, int r)
{	int i = l, j = r; // Границы сортируемого подмассива
	int x = arr[(l + r) / 2][0]; // Средний эл-т этого подмассива
	int b = 0; // Пер-нная для промежут-ного хран-ния перемещаем-х эл-в массива

	do {
		while (arr[i][0] < x)	i++; // Ищем эл-т, больший или равный среднему
		while (arr[j][0] > x)	j--; // Ищем эл-т, меньший или равный среднему

		// Когда нашли, и индексы ещё не перескочили на противоположную часть подмассива
		if (i <= j)
		{	/* Меняем местами и эл-ты и их индексы, так,
			чтобы эл-т больший, чем x, был справа от него, а меньший - слева */
			b = arr[i][0]; arr[i][0] = arr[j][0]; arr[j][0] = b;
			b = arr[i][1]; arr[i][1] = arr[j][1]; arr[j][1] = b;
			i++; j--;	}
	} while (i <= j); // Выполняем, пока не проверим все эл-ты справа (j) и слева (i) от x

	//обработка левого подмассива
	if (l < j) { sort(arr, l, j); }

	//обработка правого подмассива
	if (i < r) { sort(arr, i, r); }
}

// Заполнение искомого массива 
void solution(int n, int** arrf, int** arr, int** arrr)
{	int i, len;
	// Прохождение по каждой строке
	for (int k = 0; k < n; ++k)
	{	i = arrf[k][1]; // Индекс в arr каждого первого эл-та (по порядку в arrf)
		len = n - i; // Длина каждой строки искомого массива

		// Прохождение по каждому эл-ту строки
		for (int j = 0; j < len; ++j)
		{	arrr[k][j] = arr[i][j];	}	} /* Каждому эл-ту искомого массива ставим в соответствие
							  эл-т исходного, в соответствии
							  с внесёнными в arrf индексами */
}

// Удаление всех массивов
void del(int** arr1, int** arr2, int** arr3, int n)
{	// Проходимся по каждой строке массивов
	for (int i = 0; i < n; ++i)
	{	delete[] arr1[i];
		delete[] arr2[i];
		delete[] arr3[i];	}
	delete[] arr1;
	delete[] arr2;
	delete[] arr3;
}

// Интерфейс
bool contin()
{	while (true)
	{	cout << "\nЗапустить программу сначала (1) / Закрыть программу (0)" << endl;
		string c;	getline(cin, c);

		if (c == "0")
		{	cout << "Закрытие программы..." << endl;	return 0;	break;	}
		else if (c == "1")
		{	return 1;	break;	}
		else
		{	cout << "Некорректный ввод, попробуйте снова!" << endl << endl;	continue;	}

		break;	}
}
